# ============================
# freezer_ha: (parts suitable for configuration.yaml)
#
# Core requirement: Overview of home-cooked frozen food and expiry dates.
# Every two weeks, more food is prepared at the weekend and ends up in the freezer, thus disappearing from view.
# When freezing, 3-5 new boxes should be recorded (freezing date today, expiry date standard 4 months).
# Selectable from a standard list, but can be edited afterwards.
# Currently, there is also a web front end (experimental) that allows you to scan a product's barcode 
# and send it to the list.
#
# - Local todo Integration: https://www.home-assistant.io/integrations/local_todo
# - Helper (input_*)
# - Script (add todo list entry & ID +1)
# - (Optional) Webhook-Automation as Add-on
#
# Note: The Lovelace dashboard view CANNOT be maintained directly in configuration.yaml.
#          Use the dashboard editor (UI) OR YAML mode + separate file for this purpose.
# ============================

# ---------- Helper ----------
input_number:
  eingefroren_id:
    name: Eingefroren ID
    initial: 1
    min: 1
    max: 9999
    step: 1
    mode: box

input_text:
  last_qr_scn_gefriertruhe:
    name: Letzter Scan (Barcode, QR, …)
    max: 255

input_select:
  speisen:
    name: Speisen
    options:
      - Essen nachtragen
      - Rindsgulasch 
      - Chili con Carne 
      - Lasagne 
      - Bolognese 
      # add you favoured dishes here

# ---------- Script ----------
script:
  gefriertruhe_eintrag_anlegen_id_erhohen:
    alias: "Gefriertruhe: Eintrag anlegen & ID erhöhen"
    mode: single
    fields:
      speise:
        name: Speise
        description: Name der Speise (leer => Auswahl aus input_select.speisen)
        required: false
        selector:
          text:
    sequence:
      - variables:
          _id: "{{ states('input_number.eingefroren_id') | int }}"
          _speise: >-
            {{ speise if speise is not none and speise | trim != '' else states('input_select.speisen') }}
          _today_str: "{{ now().strftime('%d.%m.%Y') }}"
          _due_date: "{{ (now() + timedelta(days=120)).date() }}"
      - service: todo.add_item
        target:
          entity_id: todo.gefriertruhe_2   # Passe ggf. deine To-do-Liste an
        data:
          item: "{{ _speise }}"
          due_date: "{{ _due_date }}"
          description: "{{ _id }} (eingefroren am {{ _today_str }})"
      - service: input_number.set_value
        target:
          entity_id: input_number.eingefroren_id
        data:
          value: "{{ _id + 1 }}"

# ---------- (Optional) Add-on: Webhook-Automation ----------
# Aktivieren, wenn du Barcode/QR-Scans per Handy-App an Home Assistant senden willst.
automation:
  - id: gefriertruhe_webhook_addon
    alias: "Gefriertruhe: Gekaufte Produkte (Webhook-Add-on)"
    mode: single
    trigger:
      - platform: webhook
        webhook_id: barcode_scan_p
    action:
      - variables:
          _code: "{{ trigger.json.code | default('') }}"
          _product: "{{ trigger.json.product | default('') }}"
          _speise: "{{ _product if _product | trim != '' else _code }}"
      - service: input_text.set_value
        target:
          entity_id: input_text.last_qr_scn_gefriertruhe
        data:
          value: "{{ _code }} :: {{ _product }}"
      - service: logbook.log
        data:
          name: "Scan"
          message: "{{ _code }}"
          entity_id: input_text.last_qr_scn_gefriertruhe
      - service: script.gefriertruhe_eintrag_anlegen_id_erhohen
        data:
          speise: "{{ _speise }}"

# ---------- Dashboard-Hinweis ----------
# Die mitgelieferte dashboard.yaml (Grid/Tiles/Entities/Todo-List) bitte via UI nachbauen
# ODER im YAML-Mode als separate Datei einbinden (z. B. lovelace: dashboards: … filename: dashboards/gefriertruhe.yaml).
# Der eigentliche View-YAML kann nicht innerhalb der configuration.yaml liegen.
